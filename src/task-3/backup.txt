; loop s to find words using strtok from C
	; save words in words with \n at the end

	; Set up the arguments for the first call to strtok



; int compare(const void* a, const void* b) {
;     char* strA = *(char**)a;
;     char* strB = *(char**)b;

;     int lenA = strlen(strA);
;     int lenB = strlen(strB);

;     if (lenA < lenB) return -1;
;     else if (lenA > lenB) return 1;
;     else return strcmp(strA, strB);
; }



	;;;;;;debug zone;;;;;;;;

	push ebx
	push eax

	mov ecx, ebx
	mov esi, eax

pirnt_words:
	dec ecx
	js end_print_words

	mov eax, [esi]
	push eax
	push format
	call printf
	add esp, 8

	add esi, 4
	jmp pirnt_words

end_print_words:

	pop eax
	pop ebx

	;;;;;;debug zone;;;;;;;;

























%include "../include/io.mac"

global get_words
global compare_func
global sort

section .data
	delimiters db ' ,.', 10, 0
	endl db 10, 0
	word_cnt dd 0
;;;debug zone;;;
	format db "%s", 0

section .text
	extern strtok
	extern printf
	extern strcat
	extern qsort
	extern strlen
	extern strcmp
;; sort(char **words, int number_of_words, int size)
;  functia va trebui sa apeleze qsort pentru soratrea cuvintelor 
;  dupa lungime si apoi lexicografix
sort:
    enter 0, 0

	mov eax, [ebp + 8] ; words
	mov ebx, [ebp + 12] ; number_of_words
	mov ecx, [ebp + 16] ; size
	mov edx, compare_func

	push edx
	push ecx
	push ebx
	push eax

	call qsort
	add esp, 16

	; PRINTF32 `Sorted words: %s\n\x0`, eax

	mov ecx, [ebp + 12] ; number_of_words
	mov esi, [ebp + 8] ; words
print_loop:
    cmp ecx, 0
    jle end_print_loop
    dec ecx
    mov eax, [esi]
    PRINTF32 `Word: %s\n\x0`, eax
    add esi, 4
    jmp print_loop
end_print_loop:

    leave
    ret

;; get_words(char *s, char **words, int number_of_words)
;  separa stringul s in cuvinte si salveaza cuvintele in words
;  number_of_words reprezinta numarul de cuvinte
get_words:
    enter 0, 0
	pusha

	mov esi, [ebp + 12] ; words
	mov ecx, [ebp + 16] ; number_of_words

clear_array:
	mov edi, [esi]
	mov byte [edi], 0
	add esi, 4
	loop clear_array

	mov edi, [ebp + 8] ; s
	mov esi, [ebp + 12] ; words
	mov ecx, [ebp + 16] ; number_of_words

	mov [word_cnt], ecx

	mov edx, delimiters ; edx = delimiters

	push edx
	push edi
	call strtok ; strtok(s, delimiters)
	add esp, 8

	; mov esi, eax ; words[0] = strtok(s, delimiters)
	push eax
	push dword [esi]
	call strcat
	add esp, 8

	mov edx, endl ; edx = \n

	push edx ; src
	push dword [esi] ; dest
	call strcat ; strcat(words[0], \n)
	add esp, 8

process_tokens: 
	dec dword [word_cnt] ; word_cnt--
	cmp dword [word_cnt], 0 ; if word_cnt == 0
	je end_process_tokens ; return

	mov edx, delimiters ; edx = delimiters
	push edx ; delimiters
	push 0 ; s = NULL
	call strtok ; strtok(NULL, delimiters)
	add esp, 8

	mov ebx, eax ; save eax in ebx

	push eax ; src
	push dword [esi] ; dest
	call strcat ; concatenate last word from string in the words array
	add esp, 8 

	mov edx, endl ; edx = \n

	push edx ; src
	push dword [esi] ; dest
	call strcat ; strcat(words[i], \n)
	add esp, 8

	mov eax, ebx ; restore eax
	jmp process_tokens ; repeat

end_process_tokens:

	popa
    leave
    ret

compare_func:
	push ebp
	mov ebp, esp
	pusha

	; load string pointers
	mov eax, [ebp + 8] ; a
	mov ebx, [ebp + 12] ; b

	; get len of strA
	mov eax, [eax]
	push eax
	call strlen
	add esp, 4
	mov ecx, eax

	; get len of strB
	mov eax, [ebx]
	push eax
	call strlen
	add esp, 4
	mov edx, eax

	; compare lenA and lenB
	cmp ecx, edx
	jg lenA_greater
	jl lenB_greater

	; lenA == lenB, cmp lexicographically
	mov eax, [ebp + 8] ; a
	mov eax, [eax]
	push eax

	mov eax, [ebp + 12] ; b
	mov eax, [eax]
	push eax

	call strcmp
	add esp, 8

	; restore stack and return
end_compare:
	popa
	leave
	ret

lenA_greater:
	mov eax, 1
	jmp end_compare

lenB_greater:
	mov eax, -1
	jmp end_compare























%include "../include/io.mac"

global get_words
global compare_func
global sort

section .data
	delimiters db ' ,.', 10, 0
	endl db 10, 0
	word_cnt dd 0
;;;debug zone;;;
	format db "%s", 0

section .text
	extern strtok
	extern printf
	extern strcat
	extern qsort
	extern strlen
	extern strcmp
;; sort(char **words, int number_of_words, int size)
;  functia va trebui sa apeleze qsort pentru soratrea cuvintelor 
;  dupa lungime si apoi lexicografix
sort:
    enter 0, 0

	mov eax, [ebp + 8] ; words
	mov ebx, [ebp + 12] ; number_of_words
	mov ecx, [ebp + 16] ; size
	mov edx, compare_func

	push edx
	push ecx
	push ebx
	push eax

	call qsort
	add esp, 16

	mov ecx, [ebp + 12] ; number_of_words
	mov esi, [ebp + 8] ; words
print_loop:
    cmp ecx, 0
    jle end_print_loop
    dec ecx
    mov eax, [esi]
    PRINTF32 `Word: %s\n\x0`, eax
    add esi, 4
    jmp print_loop
end_print_loop:

    leave
    ret

;; get_words(char *s, char **words, int number_of_words)
;  separa stringul s in cuvinte si salveaza cuvintele in words
;  number_of_words reprezinta numarul de cuvinte
get_words:
    enter 0, 0
	pusha

	mov esi, [ebp + 12] ; words
	mov ecx, [ebp + 16] ; number_of_words

clear_array:
	mov edi, [esi]
	mov byte [edi], 0
	add esi, 4
	loop clear_array

	mov edi, [ebp + 8] ; s
	mov esi, [ebp + 12] ; words
	mov ecx, [ebp + 16] ; number_of_words

	mov [word_cnt], ecx

	mov edx, delimiters ; edx = delimiters

	push edx
	push edi
	call strtok ; strtok(s, delimiters)
	add esp, 8

	mov [esi], eax ; words[0] = strtok(s, delimiters)

process_tokens: 
	dec dword [word_cnt] ; word_cnt--
	cmp dword [word_cnt], 0 ; if word_cnt == 0
	je end_process_tokens ; return

	mov edx, delimiters ; edx = delimiters
	push edx ; delimiters
	push 0 ; s = NULL
	call strtok ; strtok(NULL, delimiters)
	add esp, 8

	mov ebx, eax ; save eax in ebx

	add esi, 4
	mov [esi], eax

	mov eax, ebx ; restore eax
	jmp process_tokens ; repeat

end_process_tokens:

	popa
    leave
    ret

compare_func:
	push ebp
	mov ebp, esp
	pusha

	; load string pointers
	mov eax, [ebp + 8] ; a
	mov ebx, [ebp + 12] ; b

	; get len of strA
	push eax
	call strlen
	add esp, 4
	mov ecx, eax

	; get len of strB
	push eax
	call strlen
	add esp, 4
	mov edx, eax

	; compare lenA and lenB
	cmp ecx, edx
	jg lenA_greater
	jl lenB_greater

	; lenA == lenB, cmp lexicographically
	mov eax, [ebp + 8] ; a
	mov eax, [eax]
	push eax

	mov eax, [ebp + 12] ; b
	mov eax, [eax]
	push eax

	call strcmp
	add esp, 8

	; restore stack and return
end_compare:
	popa
	leave
	ret

lenA_greater:
	mov eax, 1
	jmp end_compare

lenB_greater:
	mov eax, -1
	jmp end_compare











; 	mov esi, [ebp + 12] ; words
; 	mov ecx, [ebp + 16] ; number_of_words

; clear_array:
; 	mov edi, [esi]
; 	mov byte [edi], 0
; 	add esi, 4
; 	loop clear_array








; 	mov ecx, [ebp + 12] ; number_of_words
; 	mov esi, [ebp + 8] ; words
; print_loop:
;     cmp ecx, 0
;     jle end_print_loop
;     dec ecx
;     mov eax, [esi]
;     PRINTF32 `Word: %s\n\x0`, eax
;     add esi, 4
;     jmp print_loop
; end_print_loop:
